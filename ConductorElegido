package RentCarLondra1;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.*;
import java.text.SimpleDateFormat;

public class ConductorElegido {
    private static Connection connection;
    private static JFrame frame;
    private static JComboBox<String> conductoresComboBox;
    private static JTextField correoTextField;
    private JTextField startDateField;
    private JTextField endDateField;

    public ConductorElegido() {
        // Establecer conexión con la base de datos
        try {
            connection = DriverManager.getConnection("jdbc:mysql://localhost:3306/rentcarlondra", "root", "");
        } catch (SQLException e) {
            e.printStackTrace();
            return;
        }

        // Crear la ventana principal
        
        frame = new JFrame("Selección de Conductor");
        frame.setSize(1500, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(new BorderLayout());
        int width = 1200; // Anchura deseada
        int height = 700; // Altura deseada
        frame.setPreferredSize(new Dimension(width, height));

        // Crear el panel de selección de conductor
        JLabel conductorLabel = new JLabel("Seleccionar Conductor Elegido:");
        conductoresComboBox = new JComboBox<>();
        JButton asignarButton = new JButton("Asignar mi conductor");
      
        asignarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                asignarConductor();
            }
        });
        //Fecha
        
        startDateField = new JTextField(10);
        endDateField = new JTextField(10);JPanel panelFecha = new JPanel();
        JLabel labelFechaInicio = new JLabel("Fecha de inicio");
        JLabel labelFechaFinal = new JLabel("Fecha Final");

        panelFecha.setBounds(800, 80, 300, 300);
        labelFechaInicio.setBounds(40, 30, 100, 20); // Aumenté el ancho del JLabel para que sea visible
        startDateField.setBounds(40, 60, 100, 20); // Ajusté la posición para que esté debajo del JLabel

        labelFechaFinal.setBounds(40, 90, 100, 20); // Aumenté el ancho del JLabel para que sea visible
        endDateField.setBounds(40, 120, 100, 20); // Ajusté la posición para que esté debajo del JLabel

        panelFecha.setLayout(null); // Añadí esta línea para utilizar coordenadas absolutas en el panel

        panelFecha.add(labelFechaInicio);
        panelFecha.add(startDateField);
        panelFecha.add(labelFechaFinal);
        panelFecha.add(endDateField);
        frame.add(panelFecha);

        
        Font font = new Font("Arial", Font.PLAIN, 16);
        conductorLabel.setBounds(350, 100, 280, 12);
        //fuente a los botones
        conductorLabel.setFont(font);
        asignarButton.setFont(font);
        asignarButton.setBackground(Color.ORANGE);
        conductoresComboBox.setFont(font);
        conductoresComboBox.setBounds(150, 160, 620, 25);
        asignarButton.setBounds(200, 130, 480, 20);

        frame.add(conductorLabel);
        frame.add(conductoresComboBox);
        frame.add(asignarButton);

        // Crear el panel de ingreso de correo electrónico
        JLabel correoLabel = new JLabel("Email:");
        correoTextField = new JTextField(20);
        JButton buscarButton = new JButton("Buscar tu email");
        buscarButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                buscarInformacionPersonal();
            }
        });
        //buscarButton.setBackground(Color.LIGHT_GRAY);
        buscarButton.setBounds(350, 300, 160, 16);
        correoTextField.setBounds(350, 320, 170, 23);
        
        
        correoLabel.setBounds(350, 300, 54, 10);

        frame.add(buscarButton);
        frame.add(correoTextField);
        frame.add(correoLabel);

        // Cargar la lista de conductores disponibles
        cargarConductoresDisponibles();

        // Mostrar la ventana
        frame.pack();
        frame.setVisible(true);
    }
    private static void cargarConductoresDisponibles() {
        String query = "SELECT id, nombre, anios_conduciendo, valor, disponibilidad FROM driver_elegido WHERE disponibilidad = true";
        try (Statement statement = connection.createStatement();
             ResultSet resultSet = statement.executeQuery(query)) {
            while (resultSet.next()) {
                int conductorId = resultSet.getInt("id");
                String nombre = resultSet.getString("nombre");
                int aniosConduciendo = resultSet.getInt("anios_conduciendo");
                double valor = resultSet.getDouble("valor");
                conductoresComboBox.addItem(conductorId + " - "+nombre + " (Años conduciendo: " + aniosConduciendo + ", Valor: " + valor + ")");
                }
                } catch (SQLException error) {
                error.printStackTrace();
                }
                }
    private  void buscarInformacionPersonal() {
    String correoElectronico = correoTextField.getText();
    String query = "SELECT name FROM alquiler_carros WHERE email = ?";
  try (PreparedStatement statement = connection.prepareStatement(query)) {
      statement.setString(1, correoElectronico);
      try (ResultSet resultSet = statement.executeQuery()) {
          if (resultSet.next()) {
              String nombrePersona = resultSet.getString("name");
              asignarConductor();
              JOptionPane.showMessageDialog(frame, "Información personal:\n" + "name: " + nombrePersona + "\n");
          } else {
              JOptionPane.showMessageDialog(frame, "No se encontró información personal para el correo electrónico: " + correoElectronico);
          }
      }
  } catch (SQLException error) {
      error.printStackTrace();
  }
}
    public  void asignarConductor() {
        String d = startDateField.getText();
        String f = endDateField.getText();
        String conductorSeleccionado = conductoresComboBox.getSelectedItem().toString();
        int conductorId = Integer.parseInt(conductorSeleccionado.split(" - ")[0]);

        
      
        // Insertar los datos en la tabla de asignaciones
        String correoElectronico = correoTextField.getText();

        String insertQuery = "INSERT INTO asignaciones (conductor_id, correo, fecha_inicio, fecha_final) VALUES (?, ?, ?, ?)";
        try (PreparedStatement insertStatement = connection.prepareStatement(insertQuery)) {
            insertStatement.setInt(1, conductorId);
            insertStatement.setString(2, correoElectronico);
            insertStatement.setString(3, d);
            insertStatement.setString(4, f);
            //Se suben los datos
            insertStatement.executeUpdate();

            JOptionPane.showMessageDialog(frame, "Conductor asignado con éxito a: " + correoElectronico);
        } catch (SQLException error) {
            error.printStackTrace();
        }
    }
    public static void main(String[] args) {
        
        new ConductorElegido();
        
    }
}
